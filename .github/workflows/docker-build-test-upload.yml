name: Download a parent image, build a new one, and test it; then upload the image, tags, and manifests to GitHub artifacts

env:
  REGISTRY: quay.io
  OWNER: ${{ github.repository_owner }}

on:
  workflow_call:
    inputs:
      parent-image:
        description: Parent image name
        required: true
        type: string
      parent-variant:
        description: Parent variant tag prefix
        required: false
        type: string
        default: default
      image:
        description: Image name
        required: true
        type: string
      # platform:
      #   description: Image platform
      #   required: true
      #   type: string
      runsOn:
        description: GitHub Actions Runner image
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      CONTAINERHUB_USERNAME:
        required: true
      CONTAINERHUB_TOKEN:
        required: true

jobs:
  build-test-upload:
    runs-on: ${{ inputs.runsOn }}
    # This will create a registry that we use for docker images
    # as an intermediary between build and test. 
    # services:
    #   registry:
    #     image: registry:2
    #     ports:
    #       - 5000:5000

    steps:
      # Image with CUDA needs extra disk space
      - name: Free disk space üßπ
        if: contains(inputs.variant, 'cuda') && inputs.platform == 'x86_64'
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: false
          swap-storage: false

      - name: Checkout Repo ‚ö°Ô∏è
        uses: actions/checkout@v3

      - name: Set Up Python üêç
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - uses: actions/cache@v3
        name: Cache Python
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}

      - name: Install Dev Dependencies üì¶
        run: |
          pip install --upgrade pip
          pip install --upgrade -r requirements-dev.txt
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            network=host
      -
        name: Download artifact üì•
        if: ${{ inputs.parentImage != '' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.parentImage }}
          path: /tmp/

      - name: Load parent built image to Docker üê≥
        if: ${{ inputs.parentImage != '' }}
        run: |
          docker load --input /tmp/${{ inputs.parentImage }}.tar

      - name: Login to Docker Hub üîê
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - name: Login to Containers ü´ô
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: containers.renci.org
          username: ${{ secrets.CONTAINERHUB_USERNAME }}
          password: ${{ secrets.CONTAINERHUB_TOKEN }}
          logout: true

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.OWNER }}/${{ inputs.image }}
            containers.renci.org/${{ env.OWNER }}/jupyter/docker-stacks/${{ inputs.image }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=sha

      - name: Build Containers üõ†Ô∏è
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.image }}/
          push: false
          build-args: |
            NB_GID=0
            ROOT_CONTAINER=nvidia/cuda:12.1.1-cudnn8-runtime-ubuntu22.04
          # Push to renci-registry and dockerhub here.
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.OWNER }}/${{ inputs.image }}:latest
            ${{ env.OWNER }}/${{ inputs.image }}:cuda
          outputs: type=docker, dest=/tmp/${{ inputs.image }}.tar
          cache-from: type=registry,ref=${{ env.OWNER }}/${{ inputs.image }}:buildcache-${{ inputs.image }}
          cache-to: type=registry,ref=${{ env.OWNER }}/${{ inputs.image }}:buildcache-${{ inputs.image }},mode=max

      - name: Load image to docker 
        run: |
          docker load --input /tmp/${{ inputs.image }}.tar

      # - name: Run Test Docker Image
      #   run: |
      #     docker run --force-rm --rm ${{ env.OWNER }}/${{ inputs.image }}:latest

      - name: Run tests ‚úÖ
        run: python3 -m tests.run_tests --short-image-name ${{ inputs.image }} --registry ${{ env.REGISTRY }} --owner ${{ env.OWNER }}
        shell: bash

      # We do not want to push "latest" tag unless 
      # the images being built are in the main branch. 
      # the 'Run tests' step however expects "latest" tag;
      # hence - we just delete the tag after the image is tested. 
      - name: Remove latest tag if Develop Branch
        if: ${{  github.ref != 'refs/heads/main'  }}
        run: |
          docker rmi ${{ env.OWNER }}/${{ inputs.image }}:latest

      - name: Upload artifact üì§
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.image }}
          path: /tmp/${{ inputs.image }}.tar

      - name: Push to Docker üõ†Ô∏è
        run: |
          docker push --all-tags ${{ env.OWNER }}/${{ inputs.image }}

      # Because Containers often fails, we keep going and display a message.
      - name: Push to Containers ü´ô
        id: containers
        run: |
          docker push --all-tags containers.renci.org/${{ env.OWNER }}/jupyter/docker-stacks/${{ inputs.image }}
        continue-on-error: true

      # Sometimes containers.recnci.org fails so we try again.
      - name: If Containers Failed 
        if: ${{ steps.containers.conclusion == 'failure' }}
        run: |
          echo "Last push failed retrying "
          docker push --all-tags containers.renci.org/${{ env.OWNER }}/jupyter/docker-stacks/${{ inputs.image }}
          echo "Completed!"
        continue-on-error: true

