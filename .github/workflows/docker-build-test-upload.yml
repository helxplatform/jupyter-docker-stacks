name: Download parent image, build a new one and test it; then upload the image, tags and manifests to GitHub artifacts

env:
  OWNER: ${{ github.repository_owner }}

on:
  workflow_call:
    inputs:
      parentImage:
        description: Parent image name
        required: true
        type: string
      image:
        description: Image name
        required: true
        type: string
      # platform:
      #   description: Image platform
      #   required: true
      #   type: string
      runsOn:
        description: GitHub Actions Runner image
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      CONTAINERHUB_USERNAME:
        required: true
      CONTAINERHUB_TOKEN:
        required: true

jobs:
  build-test-upload:
    runs-on: ${{ inputs.runsOn }}
    # This will create a registry that we use for docker images
    # as an intermediary between build and test. 
    # services:
    #   registry:
    #     image: registry:2
    #     ports:
    #       - 5000:5000

    steps:
      - name: Checkout Repo ⚡️
        uses: actions/checkout@v3

      - name: Set Up Python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - uses: actions/cache@v3
        name: Cache Python
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}

      - name: Install Dev Dependencies 📦
        run: |
          pip install --upgrade pip
          pip install --upgrade -r requirements-dev.txt
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            network=host
      -
        name: Download artifact 📥
        if: ${{ inputs.parentImage != '' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.parentImage }}
          path: /tmp/${{ inputs.parentImage }}.tar

      - name: Load parent built image to Docker 🐳
        if: ${{ inputs.parentImage != '' }}
        run: |
          docker load --input /tmp/${{ inputs.parentImage }}.tar

      - name: Login to Docker Hub 🔐
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - name: Login to Containers 🫙
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: containers.renci.org
          username: ${{ secrets.CONTAINERHUB_USERNAME }}
          password: ${{ secrets.CONTAINERHUB_TOKEN }}
          logout: true

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.OWNER }}/${{ inputs.image }}
            containers.renci.org/${{ env.OWNER }}/jupyter/${{ inputs.image }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha

      - name: Build Containers 🛠️
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.image }}/
          push: false
          build-args: |
            NB_GID=0 
          # Push to renci-registry and dockerhub here.
          tags: ${{ inputs.image }}
          outputs: type=docker, dest=/tmp/${{ inputs.image }}.tar
          cache-from: type=registry,ref=${{ env.OWNER }}/${{ inputs.image }}:buildcache-${{ inputs.image }}
          cache-to: type=registry,ref=${{ env.OWNER }}/${{ inputs.image }}:buildcache-${{ inputs.image }},mode=max

      # - name: Run tests ✅
      #   run: python3 -m tests.run_tests --short-image-name ${{ inputs.image }} --owner ${{ env.OWNER }}
      #   shell: bash

        
      # - name: Upload artifact 📤
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ inputs.image }}
      #     path: /tmp/${{ inputs.image }}.tar

      - name: Load tested image to docker 
        run: |
          docker load --input /tmp/${{ inputs.image }}.tar

      - name: Verify image 
        run: |
          docker image ls -a 

      - name: Push Containers 🛠️
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.image }}/
          push: true
          # Push to renci-registry and dockerhub here.
          tags: ${{ steps.meta.outputs.tags }}
          # output image tags to tar file.
          # cache-from: type=registry,ref=${{ env.OWNER }}/${{ inputs.image }}:buildcache-${{ inputs.image }}
          # cache-to: type=registry,ref=${{ env.OWNER }}/${{ inputs.image }}:buildcache-${{ inputs.image }},mode=max

      # - name: Write tags file 🏷
      #   run: |
      #     python3 -m tagging.write_tags_file --short-image-name ${{ inputs.image }} --tags-dir /tmp/tags/ --owner ${{ env.OWNER }}
      #   shell: bash

      # - name: Upload tags file 💾
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ env.OWNER }}/${{ inputs.image }}
      #     path: /tmp/tags/${{ env.OWNER }}/${{ inputs.image }}.tar
      #     retention-days: 3

      # - name: Write manifest and build history file 🏷
      #   run: python3 -m tagging.write_manifest --short-image-name ${{ inputs.image }} --hist-line-dir /tmp/hist_lines/ --manifest-dir /tmp/manifests/ --owner ${{ env.OWNER }}
      #   shell: bash

      # - name: Upload manifest file 💾
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ inputs.image }}-${{ inputs.platform }}-manifest
      #     path: /tmp/manifests/${{ inputs.platform }}-${{ inputs.image }}-*.md
      #     retention-days: 3
          
      # - name: Upload build history line 💾
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ inputs.image }}-${{ inputs.platform }}-history_line
      #     path: /tmp/hist_lines/${{ inputs.platform }}-${{ inputs.image }}-*.txt
      #     retention-days: 3

      # - name: Save image as a tar for later use 💾
      #   run: docker save ${{ env.OWNER }}/${{ inputs.image }} -o /tmp/${{ inputs.image }}-${{ inputs.platform }}.tar
      #   shell: bash

      # - name: Upload image as artifact 💾
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ inputs.image }}-${{ inputs.platform }}
      #     path: /tmp/${{ inputs.image }}-${{ inputs.platform }}.tar
      #     retention-days: 3

      # # Self-hosted runners share a state (whole VM) between runs
      # - name: Cleanup artifacts 🗑️
      #   run: |
      #     rm -f /tmp/${{ inputs.image }}-${{ inputs.platform }}.tar
      #   shell: bash
      #   if: always()
